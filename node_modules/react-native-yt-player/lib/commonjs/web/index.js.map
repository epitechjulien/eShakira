{"version":3,"sources":["index.js"],"names":["player","duration","isPaused","window","innerWidth","innerHeight","width","height","onReady","invoke","bind","onError","onStateChange","onPlaybackRateChange","onPlaybackQualityChange","onPlaying","onDurationReady","_onStateChange","data","_setDuration","_setCurrentTime","createPlayer","opts","options","playerVars","enablejsapi","autoplay","rel","controls","playsinline","modestbranding","showinfo","on","playVideo","then","pauseVideo","seekTo","s","getDuration","setInterval","getCurrentTime","define"],"mappings":"6KAAA,qEACA,oFAEA,GAAIA,CAAAA,MAAJ,CACA,GAAIC,CAAAA,QAAQ,CAAG,CAAf,CACA,GAAIC,CAAAA,QAAQ,CAAG,KAAf,C,YACoCC,M,CAA5BC,U,SAAAA,U,CAAYC,W,SAAAA,W,CACpB,GAAIC,CAAAA,KAAK,CAAG,MAAZ,CACA,GAAIC,CAAAA,MAAM,CAAG,MAAb,CAOA,GAAMC,CAAAA,OAAO,CAAGC,iBAAOC,IAAP,CAAY,SAAZ,CAAhB,CACA,GAAMC,CAAAA,OAAO,CAAGF,iBAAOC,IAAP,CAAY,SAAZ,CAAhB,CACA,GAAME,CAAAA,aAAa,CAAGH,iBAAOC,IAAP,CAAY,eAAZ,CAAtB,CACA,GAAMG,CAAAA,oBAAoB,CAAGJ,iBAAOC,IAAP,CAAY,sBAAZ,CAA7B,CACA,GAAMI,CAAAA,uBAAuB,CAAGL,iBAAOC,IAAP,CAAY,yBAAZ,CAAhC,CACA,GAAMK,CAAAA,SAAS,CAAGN,iBAAOC,IAAP,CAAY,WAAZ,CAAlB,CACA,GAAMM,CAAAA,eAAe,CAAGP,iBAAOC,IAAP,CAAY,iBAAZ,CAAxB,CAEA,GAAMO,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,MAAc,IAAXC,CAAAA,IAAW,MAAXA,IAAW,CAInC,GAAIA,IAAI,GAAK,CAAT,EAAcjB,QAAQ,GAAK,CAA/B,CAAkC,CAChCkB,YAAY,GACZC,eAAe,GAChB,CAED,GAAIF,IAAI,GAAK,CAAb,CAAgBhB,QAAQ,CAAG,IAAX,CAAhB,IACKA,CAAAA,QAAQ,CAAG,KAAX,CAELU,aAAa,CAACM,IAAD,CAAb,CACD,CAbD,CAeA,GAAMG,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAC,IAAI,CAAI,CAC3B,GAAMC,CAAAA,OAAO,6BACXjB,KAAK,CAALA,KADW,CAEXC,MAAM,CAANA,MAFW,EAGRe,IAHQ,EAIXE,UAAU,6BACRC,WAAW,CAAE,CADL,CAERC,QAAQ,CAAE,CAFF,CAGRC,GAAG,CAAE,CAHG,CAIRC,QAAQ,CAAE,CAJF,CAKRC,WAAW,CAAE,CALL,CAMRC,cAAc,CAAE,CANR,CAORC,QAAQ,CAAE,CAPF,EAQLT,IAAI,CAACE,UARA,CAJC,EAAb,CAgBAxB,MAAM,CAAG,2BAAc,QAAd,CAAwBuB,OAAxB,CAAT,CACAvB,MAAM,CAACgC,EAAP,CAAU,OAAV,CAAmBxB,OAAnB,EACAR,MAAM,CAACgC,EAAP,CAAU,OAAV,CAAmBrB,OAAnB,EACAX,MAAM,CAACgC,EAAP,CAAU,aAAV,CAAyBf,cAAzB,EACAjB,MAAM,CAACgC,EAAP,CAAU,oBAAV,CAAgCnB,oBAAhC,EACAb,MAAM,CAACgC,EAAP,CAAU,uBAAV,CAAmClB,uBAAnC,EACA,GAAIQ,IAAI,CAACE,UAAL,EAAmBF,IAAI,CAACE,UAAL,CAAgBE,QAAvC,CAAiDO,SAAS,GAC3D,CAxBD,CA6BA,GAAMA,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtBjC,MAAM,CAACiC,SAAP,GAAmBC,IAAnB,CAAwB,UAAM,CAAE,CAAhC,EACD,CAFD,CAGA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvBnC,MAAM,CAACmC,UAAP,GAAoBD,IAApB,CAAyB,UAAM,CAAE,CAAjC,EACD,CAFD,CAGA,GAAME,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,CAAC,CAAI,CAClBrC,MAAM,CAACoC,MAAP,CAAcC,CAAd,EAAiBH,IAAjB,CAAsB,UAAM,CAAE,CAA9B,EACD,CAFD,CAIA,GAAMf,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,SACnBnB,CAAAA,MAAM,CAACsC,WAAP,GAAqBJ,IAArB,CAA0B,SAAAG,CAAC,CAAI,CAC7BpC,QAAQ,CAAGoC,CAAX,CACArB,eAAe,CAACqB,CAAD,CAAf,CACD,CAHD,CADmB,EAArB,CAOA,GAAMjB,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC5BmB,WAAW,CAAC,UAAM,CAChB,GAAI,CAACrC,QAAL,CAAeF,MAAM,CAACwC,cAAP,GAAwBN,IAAxB,CAA6B,SAAAG,CAAC,QAAItB,CAAAA,SAAS,CAACsB,CAAD,CAAb,EAA9B,EAChB,CAFU,CAER,GAFQ,CAAX,CAGD,CAJD,CAQA5B,iBAAOgC,MAAP,CAAc,cAAd,CAA8BpB,YAA9B,EACAZ,iBAAOgC,MAAP,CAAc,WAAd,CAA2BR,SAA3B,EACAxB,iBAAOgC,MAAP,CAAc,YAAd,CAA4BN,UAA5B,EACA1B,iBAAOgC,MAAP,CAAc,QAAd,CAAwBL,MAAxB","sourcesContent":["import YouTubePlayer from \"youtube-player\";\nimport invoke from \"react-native-webview-invoke/browser\";\n\nvar player;\nlet duration = 0;\nlet isPaused = false;\nconst { innerWidth, innerHeight } = window;\nlet width = \"100%\";\nlet height = \"100%\";\n\n// if (innerHeight > (innerWidth * 9) / 16) width = (innerHeight * 16) / 9;\n// else height = (innerWidth * 9) / 16;\n\n//listeners\n\nconst onReady = invoke.bind(\"onReady\");\nconst onError = invoke.bind(\"onError\");\nconst onStateChange = invoke.bind(\"onStateChange\");\nconst onPlaybackRateChange = invoke.bind(\"onPlaybackRateChange\");\nconst onPlaybackQualityChange = invoke.bind(\"onPlaybackQualityChange\");\nconst onPlaying = invoke.bind(\"onPlaying\");\nconst onDurationReady = invoke.bind(\"onDurationReady\");\n\nconst _onStateChange = ({ data }) => {\n  // in case first time playing ,\n  // we need to send Duration\n  // and start Interval to sent current Time and\n  if (data === 1 && duration === 0) {\n    _setDuration();\n    _setCurrentTime();\n  }\n  // we need to stop interval in case player state !== playing and activate it on playing mode\n  if (data !== 1) isPaused = true;\n  else isPaused = false;\n\n  onStateChange(data);\n};\n\nconst createPlayer = opts => {\n  const options = {\n    width,\n    height,\n    ...opts,\n    playerVars: {\n      enablejsapi: 1,\n      autoplay: 0,\n      rel: 0,\n      controls: 0,\n      playsinline: 1,\n      modestbranding: 1,\n      showinfo: 0,\n      ...opts.playerVars\n    }\n  };\n\n  player = YouTubePlayer(\"player\", options);\n  player.on(\"ready\", onReady);\n  player.on(\"error\", onError);\n  player.on(\"stateChange\", _onStateChange);\n  player.on(\"playbackRateChange\", onPlaybackRateChange);\n  player.on(\"playbackQualityChange\", onPlaybackQualityChange);\n  if (opts.playerVars && opts.playerVars.autoplay) playVideo();\n};\n\n//createPlayer({ videoId: \"Z1LmpiIGYNs\" });\n\n// actions\nconst playVideo = () => {\n  player.playVideo().then(() => {});\n};\nconst pauseVideo = () => {\n  player.pauseVideo().then(() => {});\n};\nconst seekTo = s => {\n  player.seekTo(s).then(() => {});\n};\n\nconst _setDuration = () =>\n  player.getDuration().then(s => {\n    duration = s;\n    onDurationReady(s);\n  });\n\n// send current time every 1000 ms\nconst _setCurrentTime = () => {\n  setInterval(() => {\n    if (!isPaused) player.getCurrentTime().then(s => onPlaying(s));\n  }, 500);\n};\n\n// invoke functions\n\ninvoke.define(\"createPlayer\", createPlayer);\ninvoke.define(\"playVideo\", playVideo);\ninvoke.define(\"pauseVideo\", pauseVideo);\ninvoke.define(\"seekTo\", seekTo);\n"]}